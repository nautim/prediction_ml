## adding necessary libraries
library(data.table)
library(tidyverse)
library(lubridate)
library(stringr)
library(readr)
library(skimr)
library(Hmisc)
library(caret)
library(randomForest)
library(scales)
library(ranger)
library(pdp)
library(kableExtra)

## setting seed
set.seed(1234)

## uploading data 
paris <- fread("/Users/nautim/Desktop/Data and Econometrics/Predictions with ML/listings.csv")

## filtering data according to the task
paris_cleaned <- paris %>%
  filter(accommodates >= 2 & accommodates <= 6 & # accomodates between 2 and 6 people
          room_type == "Entire home/apt" & 
           !str_detect(paris_cleaned$property_type, c("condo|house|House|cottage|room|Room|Island|Barn|bed|Boat|Cave|suite|villa|bungalow|reside")) &
                         bedrooms %in% c(1, 2, 3)) # have 1 to 3 bedrooms (small & midsize appartement)

ggplot(paris_cleaned, aes(x = bedrooms)) + geom_bar()

## background settings
color <- c("#3a5e8cFF", "#10a53dFF", "#541352FF", "#ffcf20FF", "#2f9aa0FF")
show_col(color)
color.outline = "#FFFFFF"
#color.outline = "grey90"
color.regline = "#000000"
color.statline = "#4D4D4D"
color.stat = "#000000"
color.background = "grey80"
color.fill = "#000000"
color.fill = "#0000FF"
color.fill2 ="#ADD8E6"
color.fill3 = "#FF8C00"

theme_bg <- function() {
  # Generate color palette
  palette <- c("white", 
               "grey70", 
               "black",
               "grey50") # global
  color.background
  color.background = palette[1]
  color.grid.major = palette[4]
  color.grid.minor = palette[2]
  color.axis.text = palette[3]
  color.axis.title = palette[3]
  color.title = palette[3]
  
  #  palette_brewer <- brewer.pal("Blues", n=9)
  color.fill <- palette[1]
  color.line <- palette[3]
  
  # Chart elements 
  theme_bw() +
    
    # Chart region
    theme(panel.background=element_rect(fill=color.background, color=color.background)) +
    theme(plot.background=element_rect(fill=color.background, color=color.background)) +
    theme(panel.border=element_rect(color=palette[2],size=.01)) +
    
    # Axis
    theme(axis.line=element_line(color=color.line,size=.2)) +
    
    # Grids
    theme(panel.grid.major=element_line(color=color.grid.major,size=.1)) +
    theme(panel.grid.minor=element_line(color=color.grid.major,size=.1)) +
    # theme(axis.ticks=element_blank()) +
    
    # Legend
    theme(legend.position=c(0.8,0.2),
          panel.grid.minor =element_blank()) +
    theme(legend.background = element_rect(fill="transparent")) +
    theme(legend.text = element_text(size=4,color=color.axis.title )) +
    
    # Title & axis labels
    theme(plot.title=element_text(color=color.title, size=6, vjust=1.25, hjust=0.5, face = "plain")) +
    theme(axis.text.x=element_text(size=6,color=color.axis.text, face = "plain")) +
    theme(axis.text.y=element_text(size=6,color=color.axis.text, face = "plain")) +
    theme(axis.title.x=element_text(size=6,color=color.axis.title, vjust=0, face = "plain")) +
    theme(axis.title.y=element_text(size=6,color=color.axis.title, vjust=1.25, face = "plain")) +
    
    # Margins
    theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"))
}


## looking at the number of unique values in each of the variable
unique <- c()
for (i in colnames(paris_cleaned)) {
  n <- NROW(unique(paris_cleaned[[i]]))
  unique <- append(unique, n)
}

unique_variables_n <- tibble(colnames(paris_cleaned), unique)
unique_variables_n %>%
  arrange(desc(unique))
 
## deleting pointless variables 
paris_cleaned <- paris_cleaned %>%
  select(-c("id", "listing_url", "picture_url", "description", "name", "host_url", "host_id", "host_url", "host_thumbnail_url", "host_picture_url",
  "neighborhood_overview", "host_about", "license", "scrape_id", "neighbourhood_group_cleansed", "calendar_updated", "last_scraped", "host_location", 
  "host_name", "host_since", "host_neighbourhood", "host_verifications", "neighbourhood"), 
         -contains("calculated_host_listings"),
         -contains("listings_count"))

## improving bathroom variable
unique(paris_cleaned$bathrooms_text)

paris_cleaned <- paris_cleaned %>%
  mutate(bathrooms_text = gsub("Half-bath|half-bath", 0.5, bathrooms_text),
         bathrooms = parse_number(bathrooms_text)) %>%
  select(-bathrooms_text)

unique(paris_cleaned$bathrooms)

## improving price variable, creating ln price
paris_cleaned$price <- gsub("\\$", "", paris_cleaned$price)
paris_cleaned$price <- gsub(",", "", paris_cleaned$price)
paris_cleaned$price <- as.numeric(paris_cleaned$price)
paris_cleaned$lnprice <- log(paris_cleaned$price)

## looking at the distributions of prices
ggplot(paris_cleaned, aes(x = price)) + geom_density()
ggplot(paris_cleaned, aes(x = price)) + geom_bar(width = 2)
ggplot(paris_cleaned, aes(x = lnprice)) + geom_density()
ggplot(paris_cleaned, aes(x = lnprice)) + geom_bar(width = 0.2)

## working with numeric variables
# changing host_acceptance_rate
paris_cleaned$host_acceptance_rate <- as.numeric(gsub("%", "", paris_cleaned$host_acceptance_rate))

# creating days_since_first and days_since_last review
paris_cleaned <- paris_cleaned %>%
  mutate(days_since_first = as.numeric(as.Date(calendar_last_scraped,format="%Y-%m-%d") -
                                as.Date(first_review, format="%Y-%m-%d")),
         days_since_last = as.numeric(as.Date(calendar_last_scraped,format="%Y-%m-%d") -
                                         as.Date(last_review, format="%Y-%m-%d")))
                                         
# choosing other quantitative variables and modifying their representation
quant_variables <- c("host_acceptance_rate", "accommodates", "bathrooms", "beds", "minimum_nights", "availability_60",
                     "number_of_reviews", "review_scores_rating", "reviews_per_month", "review_scores_location",
                     "days_since_first", "days_since_last")
                     
paris_cleaned <- paris_cleaned %>%
  mutate_at(vars(quant_variables), funs("n" = as.numeric))

nnames <- paris_cleaned %>%
  select(ends_with("_n")) %>%
  names()
nnames_i <- match(nnames, colnames(paris_cleaned))
colnames(paris_cleaned)[nnames_i] <- paste0("n_", quant_variables)


## working with dummy/factor variables
# working with amenities
paris_cleaned$amenities <- gsub("\"", "", paris_cleaned$amenities)
paris_cleaned$amenities <- gsub("\\[|\\]", "", paris_cleaned$amenities)
paris_cleaned$amenities <- gsub("\\[|\\]", "", paris_cleaned$amenities)

# list of unique amenities
amenities <- c()
for (i in paris_cleaned$amenities) {
  splitted <- str_split_fixed(i, ",", n = Inf)
  for (amenity in splitted) {
    if (trimws(amenity) %in% amenities) {
      next
    } else {amenities <- append(amenities, trimws(amenity))}
  }
}

amenities <- gsub("[()]", "", amenities)

amenities <- tolower(amenities)
paris_cleaned$amenities <- tolower(paris_cleaned$amenities)


to_dummies <- paris_cleaned %>% select(host_response_rate, amenities)

# calculating the number of each amenity
n_amenities <- c()
for (i in amenities) {
  n_amenities <- append(n_amenities, sum(str_detect(to_dummies$amenities, i)))
  }

# showing all amenities and their number of mentions
dt <- data.table(amenities, n_amenities)
dt <- dt %>%
  filter(n_amenities >= 1) %>%
  arrange(desc(n_amenities))
head(dt, 15)

# adding relevant binaries
paris_cleaned <- paris_cleaned %>%
  mutate(b_wifi = factor(ifelse(str_detect(paris_cleaned$amenities, "wifi"), 1, 0)),
         b_tv = factor(ifelse(str_detect(paris_cleaned$amenities, "tv"), 1, 0)),
         b_coffee = factor(ifelse(str_detect(paris_cleaned$amenities, "coffee"), 1, 0)),
         b_netflix = factor(ifelse(str_detect(paris_cleaned$amenities, "netflix"), 1, 0)),
         b_breakfast = factor(ifelse(str_detect(paris_cleaned$amenities, "breakfast"), 1, 0)),
         b_freepark = factor(ifelse(str_detect(paris_cleaned$amenities, "free parking"), 1, 0)),
         b_cleanprod = factor(ifelse(str_detect(paris_cleaned$amenities, "cleaning products"), 1, 0)),
         b_bedlinens = factor(ifelse(str_detect(paris_cleaned$amenities, "bed linens"), 1, 0)),
         b_workspace = factor(ifelse(str_detect(paris_cleaned$amenities, "dedicated workspace"), 1, 0)))
         
paris_cleaned <- paris_cleaned %>%
  mutate(f_neighbourhood_clean = factor(paris_cleaned$neighbourhood_cleansed),
         b_superhost = factor(ifelse(paris_cleaned$host_is_superhost == 't', 1, 0)))
         
## finalising the working dataset
final_data <- paris_cleaned %>%
  select(price, lnprice, starts_with(c("n_", "b_", "f_")))

## dealing with missings
to_filter <- sapply(final_data, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

# beds, bathrooms
summary(final_data$n_bathrooms)
ggplot(final_data, aes(x = n_bathrooms)) + geom_bar()
summary(final_data$n_beds)
ggplot(final_data, aes(x = n_beds)) + geom_bar()
final_data <- final_data %>%
  mutate(n_bathrooms =  ifelse(is.na(n_bathrooms), median(n_bathrooms, na.rm = T), n_bathrooms), # assume 1 toilet
         n_beds = ifelse(is.na(n_beds), n_accommodates, n_beds))

# host_acceptance_rate
final_data <- final_data %>%
  select(-n_host_acceptance_rate)

# reviews_per_month, days_since_first, days_since_last, n_review_scores_rating, n_review_scores_location
summary(final_data$n_reviews_per_month)
ggplot(final_data, aes(x = n_reviews_per_month)) + geom_bar(width = 0.1)
summary(final_data$n_days_since_first)
ggplot(final_data, aes(x = n_days_since_first)) + geom_bar(width = 3)
summary(final_data$n_days_since_last)
ggplot(final_data, aes(x = n_days_since_last)) + geom_bar(width = 3)
summary(final_data$n_review_scores_rating)
ggplot(final_data, aes(x = n_review_scores_rating)) + geom_bar(width = 0.1)
summary(final_data$n_review_scores_location)
ggplot(final_data, aes(x = n_review_scores_location)) + geom_bar(width = 0.1)

final_data <- final_data %>%
  mutate(flag_reviews_per_month = factor(ifelse(is.na(n_reviews_per_month), 1, 0)),
         n_reviews_per_month =  ifelse(is.na(n_reviews_per_month), median(n_reviews_per_month, na.rm = T), n_reviews_per_month),
         flag_days_since_first = factor(ifelse(is.na(n_days_since_first), 1, 0)),
         n_days_since_first = ifelse(is.na(n_days_since_first), median(n_days_since_first, na.rm = T), n_days_since_first),
         flag_days_since_last = factor(ifelse(is.na(n_days_since_last), 1, 0)),
         n_days_since_last = ifelse(is.na(n_days_since_last), median(n_days_since_last, na.rm = T), n_days_since_last), 
        flag_review_rating = factor(ifelse(is.na(n_review_scores_rating), 1, 0)),
         n_review_scores_rating =  ifelse(is.na(n_review_scores_rating), median(n_review_scores_rating, na.rm = T), n_review_scores_rating),
         flag_review_location = factor(ifelse(is.na(n_review_scores_location), 1, 0)),
         n_review_scores_location = ifelse(is.na(n_review_scores_location), median(n_review_scores_location, na.rm = T), n_review_scores_location))

# checking whether some NAs left 
to_filter <- sapply(final_data, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

## adding some factors/binaries from quant data
summary(final_data$n_bathrooms)
ggplot(final_data, aes(x = n_bathrooms)) + geom_bar() # makes sense to make <=1 and >1
summary(final_data$n_accommodates)
ggplot(final_data, aes(x = n_accommodates)) + geom_bar() # I think factor is not necessary here
summary(final_data$n_beds)
ggplot(final_data, aes(x = n_beds)) + geom_bar() # makes sense to make <=1, 2, 3, >=4
summary(final_data$n_minimum_nights)
ggplot(final_data, aes(x = n_minimum_nights)) + geom_bar(width = 10) # makes sense to make <=5, >=5 (5 is a median)
summary(final_data$n_availability_60)
ggplot(final_data, aes(x = n_availability_60)) + geom_bar(width = 2) # makes sense to make 0, >0

final_data <- final_data %>%
  mutate(b_bathrooms = factor(ifelse(n_bathrooms <= 1, 1, 0)),
         f_beds = factor(ifelse(n_beds <= 1, 1, ifelse(n_beds <= 2, 2, ifelse(n_beds <= 3, 3, 4)))),
         b_minimum_nights = factor(ifelse(n_minimum_nights <= 5, 1, 0)),
         b_availability_60 = factor(ifelse(n_availability_60 == 0, 0, 1)))

## adding interesting variables for future regressions
final_data <- final_data %>%
  mutate(ln_minimum_nights = ifelse(n_minimum_nights > 0, log(n_minimum_nights), 0),
         ln_days_since_first = ifelse(n_days_since_first > 0, log(n_days_since_first), 0),
         ln_days_since_first2 = ln_days_since_first^2,
         ln_days_since_last = ifelse(n_days_since_last > 0, log(n_days_since_last), 0),
         ln_days_since_last2 = ln_days_since_last^2,
         ln_review_rating = ifelse(n_review_scores_rating > 0, log(n_review_scores_rating), 0),
         ln_review_rating2 = ln_review_rating^2,
         ln_review_location = ifelse(n_review_scores_location > 0, log(n_review_scores_location), 0),
         ln_review_location2 = ln_review_location^2)

## describing the data
skimr::skim(final_data)
Hmisc::describe(final_data)

### ANALYSIS

## preparing models
# creatind datasets
train_indices <- as.integer(createDataPartition(final_data$lnprice, p = 0.7, list = FALSE))
data_train <- final_data[train_indices, ]
data_holdout <- final_data[-train_indices, ]

dim(data_train)
dim(data_holdout)

# basic variables, with neighbourhood
basic_vars <- c("n_accommodates", "f_beds", "n_bathrooms", "b_superhost", "n_minimum_nights", "n_availability_60",
  "f_neighbourhood_clean")

# largely imputed variables
reviews <- c("n_review_scores_rating", "flag_review_rating" ,"n_review_scores_location", "flag_review_location",
             "n_reviews_per_month", "flag_reviews_per_month" ,"n_days_since_first", "flag_days_since_first",
             "n_days_since_last", "flag_days_since_last" )

# dummy variables
amenities <-  grep("^b_.*", names(final_data), value = TRUE)
amenities <- amenities[-1] # because superhost is already used
amenities <- amenities[1:9] # dummies related to amenities

#interactions and squares for the LASSO
# squares
squares <- grep("2$", names(final_data), value = TRUE)

# in general
X1  <- c("n_accommodates*n_bathrooms",  "n_accommodates*n_availability_60",  "n_review_scores_rating*b_superhost",
         "b_netflix*b_superhost", "b_freepark*n_accommodates", "b_bedlines*n_accommodates")
# with neighbourhoods
X2  <- c("f_beds*f_neighbourhood_clean", "n_bathrooms*f_neighbourhood_clean",
         "n_accommodates*f_neighbourhood_clean", "n_minimum_nights*f_neighbourhood_clean",
         "b_superhost*f_neighbourhood_clean")

predictors_1 <- c(basic_vars)
predictors_2 <- c(basic_vars, reviews)
predictors_3 <- c(basic_vars, reviews, amenities)
predictors_E <- c(basic_vars, reviews, amenities, squares, X1, X2)

## building random forest
# do 5-fold CV
train_control <- trainControl(method = "cv",
                              number = 5,
                              verboseIter = FALSE)
                              
# set tuning for all models
tune_grid <- expand.grid(
  .mtry = c(8, 10, 12),
  .splitrule = "variance",
  .min.node.size = c(5, 10, 15)
)

set.seed(1234)
system.time({
  rf_model_1 <- train(
    formula(paste0("lnprice ~", paste0(predictors_1, collapse = " + "))),
    data = data_train,
    method = "ranger",
    trControl = train_control,
    tuneGrid = tune_grid,
    importance = "impurity"
  )
})
rf_model_1

set.seed(1234)
system.time({
  rf_model_2 <- train(
    formula(paste0("lnprice ~", paste0(predictors_2, collapse = " + "))),
    data = data_train,
    method = "ranger",
    trControl = train_control,
    tuneGrid = tune_grid,
    importance = "impurity"
  )
})
rf_model_2

set.seed(1234)
system.time({
  rf_model_3 <- train(
    formula(paste0("lnprice ~", paste0(predictors_3, collapse = " + "))),
    data = data_train,
    method = "ranger",
    trControl = train_control,
    tuneGrid = tune_grid,
    importance = "impurity"
  )
})
rf_model_3

# auto tuning for the third model
set.seed(1234)
system.time({
   rf_model_3auto <- train(
     formula(paste0("lnprice ~", paste0(predictors_3, collapse = " + "))),
     data = data_train,
     method = "ranger",
     trControl = train_control,
     importance = "impurity"
   )
 })
summary(rf_model_3auto)


results <- resamples(
  list(
    model_1  = rf_model_1,
    model_2  = rf_model_2,
    model_3  = rf_model_3,
    model_3b = rf_model_3auto
  )
)
summary(results)

## using model 3 as a benchmark (the best performance)
rf_tuning_model3 <- rf_model_3$results %>%
  dplyr::select(mtry, min.node.size, RMSE) %>%
  dplyr::rename(nodes = min.node.size) %>%
  spread(key = mtry, value = RMSE)
rf_tuning_model3

result_1 <- matrix(c(
  rf_model_1$finalModel$mtry,
  rf_model_2$finalModel$mtry,
  rf_model_3$finalModel$mtry,
  rf_model_3auto$finalModel$mtry,
  rf_model_1$finalModel$min.node.size,
  rf_model_2$finalModel$min.node.size,
  rf_model_3$finalModel$min.node.size
  rf_model_3auto$finalModel$min.node.size
  
),
nrow=3, ncol=2,
dimnames = list(c("Model 1", "Model 2","Model 3"),
                c("Min vars","Min nodes"))
)

kable(x = result_1, format = "html", digits = 3)

group.importance <- function(rf.obj, groups) {
  var.imp <- as.matrix(sapply(groups, function(g) {
    sum(importance(rf.obj)[g], na.rm = TRUE)
  }))
  colnames(var.imp) <- "MeanDecreaseGini"
  return(var.imp)
}


rf_model_3_var_imp <- ranger::importance(rf_model_3$finalModel)/1000
rf_model_3_var_imp_df <-
  data.frame(varname = names(rf_model_3_var_imp),imp = rf_model_3_var_imp) %>%
  mutate(varname = gsub("f_neighbourhood_cleansed", "Borough:", varname) ) %>%
  mutate(varname = gsub("f_room_type", "Room type:", varname) ) %>%
  arrange(desc(imp)) %>%
  mutate(imp_percentage = imp/sum(imp))


# visuals for variables' importance 
cutoff = 0.15
ggplot(rf_model_3_var_imp_df[rf_model_3_var_imp_df$imp>cutoff,],
                                  aes(x=reorder(varname, imp), y=imp_percentage)) +
  geom_point(color=color[1], size=1.5) +
  geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color=color[1], size=1) +
  ylab("Importance (Percent)") +
  xlab("Variable Name") +
  coord_flip() +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_bg() +
  theme(axis.text.x = element_text(size=6), axis.text.y = element_text(size=6),
        axis.title.x = element_text(size=6), axis.title.y = element_text(size=6))
        
varnames <- rf_model_3$finalModel$xNames

f_neighbourhood_clean_varnames <- grep("f_neighbourhood_clean",varnames, value = TRUE)
f_bed_clean_varnames <- grep("f_bed",varnames, value = TRUE)

groups <- list(f_neighbourhood_clean = f_neighbourhood_clean_varnames,
               f_bed = f_bed_clean_varnames,
               b_superhost = "b_superhost1",
               b_tv = "b_tv1",
               n_bathrooms = "n_bathrooms",
               n_accommodates = "n_accommodates",
               n_availability60 = "n_availability_60")

rf_model_3_var_imp_grouped <- group.importance(rf_model_3$finalModel, groups)
rf_model_3_var_imp_grouped_df <- data.frame(varname = rownames(rf_model_3_var_imp_grouped),
                                            imp = rf_model_3_var_imp_grouped[,1])  %>%
  mutate(imp_percentage = imp/sum(imp))


ggplot(rf_model_3_var_imp_grouped_df, aes(x=reorder(varname, imp), y=imp_percentage)) +
  geom_point(color=color[1], size=1.5) +
  geom_segment(aes(x=varname,xend=varname,y=0,yend=imp_percentage), color=color[1], size=0.7) +
  ylab("Importance (Percent)") +   xlab("Variable Name") +
  coord_flip() +
  # expand=c(0,0),
  scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
  theme_bg() +
  theme(axis.text.x = element_text(size=6), axis.text.y = element_text(size=6),
        axis.title.x = element_text(size=6), axis.title.y = element_text(size=6))

# partial dependence plots 
pdp_n_neigh <- pdp::partial(rf_model_3, pred.var = "f_neighbourhood_clean", pred.grid = distinct_(data_holdout, "f_neighbourhood_clean"), train = data_train)
pdp_n_neigh_plot <- pdp_n_neigh %>%
  autoplot( ) +
  geom_point(color=color[1], size=2) +
  ylab("Predicted log price") +
  xlab("Neighbourhood") +
  theme_bg() +
  theme(axis.text.x = element_text(angle = 90))
pdp_n_neigh_plot

pdp_n_acc <- pdp::partial(rf_model_3, pred.var = "n_accommodates", pred.grid = distinct_(data_holdout, "n_accommodates"), train = data_train)
pdp_n_acc_plot <- pdp_n_acc %>%
  autoplot( ) +
  geom_point(color=color[1], size=2) +
  geom_line(color=color[1], size=1) +
  ylab("Predicted log price") +
  xlab("Accommodates (persons)") +
  scale_x_continuous(limit=c(1,7), breaks=seq(1,7,1))+
  theme_bg()
pdp_n_acc_plot

pdp_n_bath <- pdp::partial(rf_model_3, pred.var = "n_bathrooms", pred.grid = distinct_(data_holdout, "n_bathrooms"), train = data_train)
pdp_n_bath_plot <- pdp_n_bath %>%
  autoplot( ) +
  geom_point(color=color[1], size=2) +
  geom_line(color=color[1], size=1) +
  ylab("Predicted log price") +
  xlab("Bathrooms (number)") +
  scale_x_continuous(limit=c(0,7), breaks=seq(0,7,1))+
  theme_bg()
pdp_n_bath_plot

pdp_f_bed <- pdp::partial(rf_model_3, pred.var = "f_beds", pred.grid = distinct_(data_holdout, "f_beds"), train = data_train)
pdp_f_bed_plot <- pdp_f_bed %>%
  autoplot( ) +
  geom_point(color=color[1], size=2) +
  ylab("Predicted log price") +
  xlab("Number of beds, category") +
  theme_bg()
pdp_f_bed_plot


pdp_b_tv <- pdp::partial(rf_model_3, pred.var = "b_tv", pred.grid = distinct_(data_holdout, "b_tv"), train = data_train)
pdp_b_tv_plot <- pdp_b_tv %>%
  autoplot( ) +
  geom_point(color=color[1], size=2) +
  ylab("Predicted log price") +
  xlab("TV") +
  theme_bg()
pdp_b_tv_plot

# scatter plot of prediction vs real values
data_holdout_w_prediction <- data_holdout %>%
  mutate(predicted_lnprice = predict(rf_model_3, newdata = data_holdout))
data_holdout_w_prediction %>%
  select(lnprice, predicted_lnprice) %>%
  ggplot(aes(lnprice, predicted_lnprice)) + geom_point()


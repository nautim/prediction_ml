## adding necessary libraries
library(data.table)
library(stringr)
library(readr)
library(skimr)
library(Hmisc)
library(caret)
library(randomForest)
library(scales)
library(ranger)
library(pdp)

## setting seed
set.seed(1234)

## uploading data 
paris <- fread("/Users/nautim/Desktop/Data and Econometrics/Predictions with ML/listings.csv")

## filtering data according to the task
paris_cleaned <- paris %>%
  filter(accommodates >= 2 & accommodates <= 6 & # accomodates between 2 and 6 people
          room_type == "Entire home/apt" & 
           !str_detect(paris_cleaned$property_type, c("condo|house|House|cottage|room|Room|Island|Barn|bed|Boat|Cave|suite|villa|bungalow|reside")) &
                         bedrooms %in% c(1, 2, 3)) # have 1 to 3 bedrooms (small & midsize appartement)

ggplot(paris_cleaned, aes(x = bedrooms)) + geom_bar()

## looking at the number of unique values in each of the variable
unique <- c()
for (i in colnames(paris_cleaned)) {
  n <- NROW(unique(paris_cleaned[[i]]))
  unique <- append(unique, n)
}

unique_variables_n <- tibble(colnames(paris_cleaned), unique)
unique_variables_n %>%
  arrange(desc(unique))
 
## deleting pointless variables 
paris_cleaned <- paris_cleaned %>%
  select(-c("id", "listing_url", "picture_url", "description", "name", "host_url", "host_id", "host_url", "host_thumbnail_url", "host_picture_url",
  "neighborhood_overview", "host_about", "license", "scrape_id", "neighbourhood_group_cleansed", "calendar_updated", "last_scraped", "host_location", 
  "host_name", "host_since", "host_neighbourhood", "host_verifications", "neighbourhood"), 
         -contains("calculated_host_listings"),
         -contains("listings_count"))

## improving bathroom variable
unique(paris_cleaned$bathrooms_text)

paris_cleaned <- paris_cleaned %>%
  mutate(bathrooms_text = gsub("Half-bath|half-bath", 0.5, bathrooms_text),
         bathrooms = parse_number(bathrooms_text)) %>%
  select(-bathrooms_text)

unique(paris_cleaned$bathrooms)

## improving price variable, creating ln price
paris_cleaned$price <- gsub("\\$", "", paris_cleaned$price)
paris_cleaned$price <- gsub(",", "", paris_cleaned$price)
paris_cleaned$price <- as.numeric(paris_cleaned$price)
paris_cleaned$lnprice <- log(paris_cleaned$price)

## looking at the distributions of prices
ggplot(paris_cleaned, aes(x = price)) + geom_density()
ggplot(paris_cleaned, aes(x = price)) + geom_bar(width = 2)
ggplot(paris_cleaned, aes(x = lnprice)) + geom_density()
ggplot(paris_cleaned, aes(x = lnprice)) + geom_bar(width = 0.2)

## working with numeric variables
# changing host_acceptance_rate
paris_cleaned$host_acceptance_rate <- as.numeric(gsub("%", "", paris_cleaned$host_acceptance_rate))

# creating days_since_first and days_since_last review
paris_cleaned <- paris_cleaned %>%
  mutate(days_since_first = as.numeric(as.Date(calendar_last_scraped,format="%Y-%m-%d") -
                                as.Date(first_review, format="%Y-%m-%d")),
         days_since_last = as.numeric(as.Date(calendar_last_scraped,format="%Y-%m-%d") -
                                         as.Date(last_review, format="%Y-%m-%d")))
                                         
# choosing other quantitative variables and modifying their representation
quant_variables <- c("host_acceptance_rate", "accommodates", "bathrooms", "beds", "minimum_nights", "availability_60",
                     "number_of_reviews", "review_scores_rating", "reviews_per_month", "review_scores_location",
                     "days_since_first", "days_since_last")
                     
paris_cleaned <- paris_cleaned %>%
  mutate_at(vars(quant_variables), funs("n" = as.numeric))

nnames <- paris_cleaned %>%
  select(ends_with("_n")) %>%
  names()
nnames_i <- match(nnames, colnames(paris_cleaned))
colnames(paris_cleaned)[nnames_i] <- paste0("n_", quant_variables)


## working with dummy/factor variables
# working with amenities
paris_cleaned$amenities <- gsub("\"", "", paris_cleaned$amenities)
paris_cleaned$amenities <- gsub("\\[|\\]", "", paris_cleaned$amenities)
paris_cleaned$amenities <- gsub("\\[|\\]", "", paris_cleaned$amenities)

# list of unique amenities
amenities <- c()
for (i in paris_cleaned$amenities) {
  splitted <- str_split_fixed(i, ",", n = Inf)
  for (amenity in splitted) {
    if (trimws(amenity) %in% amenities) {
      next
    } else {amenities <- append(amenities, trimws(amenity))}
  }
}

amenities <- tolower(amenities)
paris_cleaned$amenities <- tolower(paris_cleaned$amenities)

to_dummies <- paris_cleaned %>% select(host_response_rate, amenities)

# calculating the number of each amenity
n_amenities <- c()
for (i in amenities) {
  n_amenities <- append(n_amenities, sum(str_detect(to_dummies$amenities, i)))
  }

amenities[425] <- "CD player with lots of CD available"
amenities[426] <- "classical and opera"

# showing all amenities and their number of mentions
dt <- data.table(amenities, n_amenities)
dt <- dt %>%
  filter(n_amenities >= 1) %>%
  arrange(desc(n_amenities))
head(dt, 15)

# adding relevant binaries
paris_cleaned <- paris_cleaned %>%
  mutate(b_wifi = factor(ifelse(str_detect(paris_cleaned$amenities, "wifi"), 1, 0)),
         b_tv = factor(ifelse(str_detect(paris_cleaned$amenities, "tv"), 1, 0)),
         b_coffee = factor(ifelse(str_detect(paris_cleaned$amenities, "coffee"), 1, 0)),
         b_netflix = factor(ifelse(str_detect(paris_cleaned$amenities, "netflix"), 1, 0)),
         b_breakfast = factor(ifelse(str_detect(paris_cleaned$amenities, "breakfast"), 1, 0)),
         b_freepark = factor(ifelse(str_detect(paris_cleaned$amenities, "free parking"), 1, 0)),
         b_cleanprod = factor(ifelse(str_detect(paris_cleaned$amenities, "cleaning products"), 1, 0)),
         b_bedlinens = factor(ifelse(str_detect(paris_cleaned$amenities, "bed linens"), 1, 0)),
         b_workspace = factor(ifelse(str_detect(paris_cleaned$amenities, "dedicated workspace"), 1, 0)))
         
paris_cleaned <- paris_cleaned %>%
  mutate(f_neighbourhood_clean = factor(paris_cleaned$neighbourhood_cleansed),
         b_superhost = factor(ifelse(paris_cleaned$host_is_superhost == 't', 1, 0)))
         
## finalising the working dataset
final_data <- paris_cleaned %>%
  select(price, lnprice, starts_with(c("n_", "b_", "f_")))

## dealing with missings
to_filter <- sapply(final_data, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

# beds, bathrooms
summary(final_data$n_bathrooms)
ggplot(final_data, aes(x = n_bathrooms)) + geom_bar()
summary(final_data$n_beds)
ggplot(final_data, aes(x = n_beds)) + geom_bar()
final_data <- final_data %>%
  mutate(n_bathrooms =  ifelse(is.na(n_bathrooms), median(n_bathrooms, na.rm = T), n_bathrooms), # assume 1 toilet
         n_beds = ifelse(is.na(n_beds), n_accommodates, n_beds))

# host_acceptance_rate
final_data <- final_data %>%
  select(-n_host_acceptance_rate)

# reviews_per_month, days_since_first, days_since_last
summary(final_data$n_reviews_per_month)
ggplot(final_data, aes(x = n_reviews_per_month)) + geom_bar(width = 0.1)
summary(final_data$n_days_since_first)
ggplot(final_data, aes(x = n_days_since_first)) + geom_bar(width = 3)
summary(final_data$n_days_since_last)
ggplot(final_data, aes(x = n_days_since_last)) + geom_bar(width = 3)
final_data <- final_data %>%
  mutate(flag_reviews_per_month = factor(ifelse(is.na(n_reviews_per_month), 1, 0)),
         n_reviews_per_month =  ifelse(is.na(n_reviews_per_month), median(n_reviews_per_month, na.rm = T), n_reviews_per_month),
         flag_days_since_first = factor(ifelse(is.na(n_days_since_first), 1, 0)),
         n_days_since_first = ifelse(is.na(n_days_since_first), median(n_days_since_first, na.rm = T), n_days_since_first),
         flag_days_since_last = factor(ifelse(is.na(n_days_since_last), 1, 0)),
         n_days_since_last = ifelse(is.na(n_days_since_last), median(n_days_since_last, na.rm = T), n_days_since_last))

# checking whether some NAs left 
to_filter <- sapply(final_data, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

## adding some factors/binaries from quant data
summary(final_data$n_bathrooms)
ggplot(final_data, aes(x = n_bathrooms)) + geom_bar() # makes sense to make <=1 and >1
summary(final_data$n_accommodates)
ggplot(final_data, aes(x = n_accommodates)) + geom_bar() # I think factor is not necessary here
summary(final_data$n_beds)
ggplot(final_data, aes(x = n_beds)) + geom_bar() # makes sense to make <=1, 2, 3, >=4
summary(final_data$n_minimum_nights)
ggplot(final_data, aes(x = n_minimum_nights)) + geom_bar(width = 10) # makes sense to make <=5, >=5 (5 is a median)
summary(final_data$n_availability_60)
ggplot(final_data, aes(x = n_availability_60)) + geom_bar(width = 2) # makes sense to make 0, >0

final_data <- final_data %>%
  mutate(b_bathrooms = factor(ifelse(n_bathrooms <= 1, 1, 0)),
         f_beds = factor(ifelse(n_beds <= 1, 1, ifelse(n_beds <= 2, 2, ifelse(n_beds <= 3, 3, 4)))),
         b_minimum_nights = factor(ifelse(n_minimum_nights <= 5, 1, 0)),
         b_availability_60 = factor(ifelse(n_availability_60 == 0, 0, 1)))

## adding interesting variables for future regressions
final_data <- final_data %>%
  mutate(ln_minimum_nights = ifelse(n_minimum_nights > 0, log(n_minimum_nights), 0),
         ln_days_since_first = ifelse(n_days_since_first > 0, log(n_days_since_first), 0),
         ln_days_since_first2 = ln_days_since_first^2,
         ln_days_since_last = ifelse(n_days_since_last > 0, log(n_days_since_last), 0),
         ln_days_since_last2 = ln_days_since_last^2,
         ln_review_rating = ifelse(n_review_scores_rating > 0, log(n_review_scores_rating), 0),
         ln_review_rating2 = ln_review_rating^2,
         ln_review_location = ifelse(n_review_scores_location > 0, log(n_review_scores_location), 0),
         ln_review_location2 = ln_review_location^2)













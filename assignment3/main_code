# uploading some background functions and settings
color <- c("#3a5e8cFF", "#10a53dFF", "#541352FF", "#ffcf20FF", "#2f9aa0FF")

color.outline = "#FFFFFF"
#color.outline = "grey90"
color.regline = "#000000"
color.statline = "#4D4D4D"
color.stat = "#000000"
color.background = "grey80"
color.fill = "#000000"

color.fill = "#0000FF"
color.fill2 ="#ADD8E6"
color.fill3 = "#FF8C00"

theme_bg <- function() {
  
  # Generate color palette
  palette <- c("white", 
               "grey70", 
               "black",
               "grey50") # global
  
  color.background
  color.background = palette[1]
  color.grid.major = palette[4]
  color.grid.minor = palette[2]
  color.axis.text = palette[3]
  color.axis.title = palette[3]
  color.title = palette[3]
  
  #  palette_brewer <- brewer.pal("Blues", n=9)
  color.fill <- palette[1]
  color.line <- palette[3]
  
  # Chart elements
  
  theme_bw() +
    
    # Chart region
    
    theme(panel.background=element_rect(fill=color.background, color=color.background)) +
    theme(plot.background=element_rect(fill=color.background, color=color.background)) +
    theme(panel.border=element_rect(color=palette[2],size=.01)) +
    # Axis
    
    theme(axis.line=element_line(color=color.line,size=.2)) +
    
    # Grids
    
    theme(panel.grid.major=element_line(color=color.grid.major,size=.1)) +
    theme(panel.grid.minor=element_line(color=color.grid.major,size=.1)) +
    # theme(axis.ticks=element_blank()) +
    
    # Legend
    
    theme(legend.position=c(0.8,0.2),
          panel.grid.minor =element_blank()) +
    theme(legend.background = element_rect(fill="transparent")) +
    theme(legend.text = element_text(size=4,color=color.axis.title )) +
    
    # Title & axis labels
    
    theme(plot.title=element_text(color=color.title, size=6, vjust=1.25, hjust=0.5, face = "plain")) +
    theme(axis.text.x=element_text(size=6,color=color.axis.text, face = "plain")) +
    theme(axis.text.y=element_text(size=6,color=color.axis.text, face = "plain")) +
    theme(axis.title.x=element_text(size=6,color=color.axis.title, vjust=0, face = "plain")) +
    theme(axis.title.y=element_text(size=6,color=color.axis.title, vjust=1.25, face = "plain")) +
    
    # Margins
    
    theme(plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), "cm"))
}

twoClassSummaryExtended <- function (data, lev = NULL, model = NULL)
{
  lvls <- levels(data$obs)
  rmse <- sqrt(mean((data[, lvls[1]] - ifelse(data$obs == lev[2], 0, 1))^2))
  c(defaultSummary(data, lev, model), "RMSE" = rmse)
}

# createRocPlot <- function(r, file_name,  mywidth_large=12, myheight_large = 9) {
createRocPlot <- function(r, file_name,  myheight_small = 5.625, mywidth_small = 7.5) {
  all_coords <- coords(r, x="all", ret="all", transpose = FALSE)

  roc_plot <- ggplot(data = all_coords, aes(x = fpr, y = tpr)) +
    geom_line(color=color[1], size = 0.7) +
    geom_area(aes(fill = color[4], alpha=0.4), alpha = 0.3, position = 'identity', color = color[1]) +
    scale_fill_viridis(discrete = TRUE, begin=0.6, alpha=0.5, guide = FALSE) +
    xlab("False Positive Rate (1-Specifity)") +
    ylab("True Positive Rate (Sensitivity)") +
    geom_abline(intercept = 0, slope = 1,  linetype = "dotted", col = "black") +
    scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, .1), expand = c(0, 0.01)) +
    scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, .1), expand = c(0.01, 0)) +
    theme_bg()
  #+    theme(axis.text.x = element_text(size=13), axis.text.y = element_text(size=13),
  #        axis.title.x = element_text(size=13), axis.title.y = element_text(size=13))

  #ggsave(plot = roc_plot, paste0(file_name, ".png"),      width=mywidth_small, height=myheight_small, dpi=1200)
  #cairo_ps(filename = paste0(file_name, ".eps"),    #        width = mywidth_small, height = myheight_small, pointsize = 12,    #       fallback_resolution = 1200)
  #print(roc_plot)
  #dev.off()

  roc_plot
}

create_calibration_plot <- function(data, file_name, prob_var, actual_var, y_lab = "Actual event probability" , n_bins = 10, breaks = NULL) {
  
  if (is.null(breaks)) {
    breaks <- seq(0,1,length.out = n_bins + 1)
  }

  binned_data <- data %>%
    mutate(
      prob_bin = cut(!!as.name(prob_var), 
                    breaks = breaks,
                    include.lowest = TRUE)
    ) %>%
    group_by(prob_bin, .drop=FALSE) %>%
    summarise(mean_prob = mean(!!as.name(prob_var)), mean_actual = mean(!!as.name(actual_var)), n = n())

    p <- ggplot(data = binned_data) +
      geom_line(aes(mean_prob, mean_actual), color=color[1], size=0.6, show.legend = TRUE) +
      geom_point(aes(mean_prob,mean_actual), color = color[1], size = 1, shape = 16, alpha = 0.7, show.legend=F, na.rm = TRUE) +
      geom_segment(x=min(breaks), xend=max(breaks), y=min(breaks), yend=max(breaks), color=color[2], size=0.3) +
      theme_bg() +
      labs(x= "Predicted event probability",
           y= y_lab) +
      coord_cartesian(xlim=c(0,1), ylim=c(0,1))+
      expand_limits(x = 0.01, y = 0.01) +
      scale_y_continuous(expand=c(0.01,0.01),breaks=c(seq(0,1,0.1))) +
      scale_x_continuous(expand=c(0.01,0.01),breaks=c(seq(0,1,0.1))) 

    p
}

#createLossPlot
createLossPlot <- function(r, best_coords, file_name,  myheight_small = 5.625, mywidth_small = 7.5) {
  t <- best_coords$threshold[1]
  sp <- best_coords$specificity[1]
  se <- best_coords$sensitivity[1]
  n <- rowSums(best_coords[c("tn", "tp", "fn", "fp")])[1]

  all_coords <- coords(r, x="all", ret="all", transpose = FALSE)
  all_coords <- all_coords %>%
    mutate(loss = (fp*FP + fn*FN)/n)
  l <- all_coords[all_coords$threshold == t, "loss"]

  loss_plot <- ggplot(data = all_coords, aes(x = threshold, y = loss)) +
    geom_line(color=color[1], size=0.7) +
    scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
    geom_vline(xintercept = t , color = color[2] ) +
    annotate(geom = "text", x = t, y= min(all_coords$loss),
             label=paste0("best threshold: ", round(t,2)),
             colour=color[2], angle=90, vjust = -1, hjust = -0.5, size = 7) +
    annotate(geom = "text", x = t, y= l,
             label= round(l, 2), hjust = -0.3, size = 7) +
    theme_bg()

  #  ggsave(plot = loss_plot, paste0(file_name,".png"), width=mywidth_small, height=myheight_small, dpi=1200)
  #  cairo_ps(filename = paste0(file_name,".eps"), width = mywidth_small, height = myheight_small, pointsize = 12, fallback_resolution = 1200)
  #  print(loss_plot)
  #  dev.off()

  loss_plot
}

#createRocPlotWithOptimal 
createRocPlotWithOptimal <- function(r, best_coords, file_name,  myheight_small = 5.625, mywidth_small = 7.5) {

  all_coords <- coords(r, x="all", ret="all", transpose = FALSE)
  t <- best_coords$threshold[1]
  sp <- best_coords$specificity[1]
  se <- best_coords$sensitivity[1]

  roc_plot <- ggplot(data = all_coords, aes(x = specificity, y = sensitivity)) +
    geom_line(color=color[1], size=0.7) +
    scale_y_continuous(breaks = seq(0, 1, by = 0.1)) +
    scale_x_reverse(breaks = seq(0, 1, by = 0.1)) +
    geom_point(aes(x = sp, y = se)) +
    annotate(geom = "text", x = sp, y = se,
             label = paste(round(sp, 2),round(se, 2),sep = ", "),
             hjust = 1, vjust = -1, size = 7) +
    theme_bg()
  #  + theme(axis.text.x = element_text(size=20), axis.text.y = element_text(size=20),
  #          axis.title.x = element_text(size=20), axis.title.y = element_text(size=20))

  #  ggsave(plot = roc_plot, paste0(file_name, ".png"),         width=mywidth_small, height=myheight_small, dpi=1200)
  # cairo_ps(filename = paste0(file_name, ".eps"),           width = mywidth_small, height = myheight_small, pointsize = 12,           fallback_resolution = 1200)
  #print(roc_plot)
  #dev.off()

  roc_plot
}

# adding libraries and uploading data
library(data.table)
library(DescTools)
library(margins)
library(caret)
library(tidyverse)
library(knitr)
library(pROC)
library(viridis)
library(rpart)
library(rpart.plot)

data <- fread("/Users/nautim/Desktop/Data and Econometrics/Predictions with ML/cs_bisnode_panel.csv")

## 287829 observations, 48 variables

# preliminary checks of NAs
to_filter <- sapply(data, function(x) sum(is.na(x)))
to_filter[to_filter > 0]

## variables with more than 80% of NAs: COGS, finished_prod, net_dom_sales, net_exp_sales, wages
## they can be deleted

data <- data %>%
  select(-c(COGS, finished_prod, net_dom_sales, net_exp_sales, wages))

####### 
####### sample design
####### 

data_filtered <- data %>%
  filter(year %in% c(2010:2015))
NROW(unique(data_filtered$comp_id))
## 167606 observations now, 39375 unique companies

data_filtered <- data_filtered %>%
  filter(sales >= 1000 & sales <= 50000000)
NROW(unique(data_filtered$comp_id))
## 129491 observations now, 33703 unique companies

####### 
####### label engineering 
####### 

data_filtered_wide <- data_filtered %>% 
  pivot_wider(id_cols = c(comp_id, year), names_from = year, values_from = sales) %>%
  mutate(total_change = `2014` - `2012`,
         perc_change = total_change/`2012`*100)

summary(data_filtered_wide$perc_change)

# imputations
data_filtered_wide <- data_filtered %>% 
  pivot_wider(id_cols = c(comp_id, year), names_from = year, values_from = sales) %>% 
  mutate(imputed = ifelse(is.na(`2012`) == TRUE | is.na(`2014`) == TRUE, 1, 0)) %>%
  mutate(`2012` = ifelse(is.na(`2012`) == TRUE, ifelse(is.na(`2011`) == FALSE & is.na(`2013`) == FALSE, (`2011` + `2013`)/2, NA), `2012`),
         `2012` = ifelse(is.na(`2012`) == TRUE, ifelse(is.na(`2011`) == TRUE & is.na(`2013`) == FALSE, `2013`, NA), `2012`),
         `2014` = ifelse(is.na(`2014`) == TRUE, ifelse(is.na(`2013`) == FALSE & is.na(`2015`) == FALSE, (`2013` + `2015`)/2, NA), `2014`),
         `2014` = ifelse(is.na(`2014`) == TRUE, ifelse(is.na(`2013`) == TRUE & is.na(`2015`) == FALSE, `2015`, NA), `2014`)) %>%
  mutate(total_change = `2014` - `2012`,
         perc_change = total_change/`2012`*100)
summary(data_filtered_wide$perc_change)


data_filtered <- data_filtered_wide %>%
  select(comp_id, imputed, total_change, perc_change) %>%
  right_join(data_filtered, by = "comp_id")

data_filtered <- data_filtered[!is.na(data_filtered$perc_change),]
summary(data_filtered$perc_change)
NROW(unique(data_filtered$comp_id))
## 102932 observations now, 19662 firms

# visualising dependent variable
quantile(data_filtered$perc_change, probs = c(0.65))

data_filtered %>%
  filter(perc_change <= 1000) %>%
  ggplot(aes(x = perc_change)) + geom_density() +
  geom_vline(xintercept = 35, color = "blue")
  
# creating fast growth binary - main dependent variable
data_filtered <- data_filtered %>%
  mutate(fast_growth = ifelse(perc_change >= 35, 1, 0))

data_filtered$fast_growth_f <- as.factor(data_filtered$fast_growth)

summary(data_filtered$fast_growth)
table(data_filtered$fast_growth_f)
data_filtered %>%
  select(comp_id, fast_growth) %>%
  unique() %>%
  group_by(fast_growth) %>%
  dplyr::summarize(n_firms = n())



